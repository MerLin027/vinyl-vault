{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VRUSHANK\\\\Desktop\\\\Ecom Website\\\\client\\\\src\\\\contexts\\\\NotificationContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport Notification from '../components/UI/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const showNotification = useCallback((message, type = 'success', duration = 3000) => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type,\n      duration\n    }]);\n    return id;\n  }, []);\n  const hideNotification = useCallback(id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  }, []);\n  const value = {\n    showNotification,\n    hideNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, notifications.map(notification => /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      duration: notification.duration,\n      onClose: () => hideNotification(notification.id)\n    }, notification.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"nlYm3SbllYNjCTz67Yh++Tnmuew=\");\n_c = NotificationProvider;\nexport default NotificationContext;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","Notification","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","showNotification","message","type","duration","id","Date","now","prev","hideNotification","filter","notification","value","Provider","map","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/VRUSHANK/Desktop/Ecom Website/client/src/contexts/NotificationContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport Notification from '../components/UI/Notification';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  \r\n  const showNotification = useCallback((message, type = 'success', duration = 3000) => {\r\n    const id = Date.now();\r\n    setNotifications(prev => [...prev, { id, message, type, duration }]);\r\n    \r\n    return id;\r\n  }, []);\r\n  \r\n  const hideNotification = useCallback((id) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  }, []);\r\n  \r\n  const value = {\r\n    showNotification,\r\n    hideNotification\r\n  };\r\n  \r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n      {notifications.map(notification => (\r\n        <Notification\r\n          key={notification.id}\r\n          message={notification.message}\r\n          type={notification.type}\r\n          duration={notification.duration}\r\n          onClose={() => hideNotification(notification.id)}\r\n        />\r\n      ))}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/E,OAAOC,YAAY,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,mBAAmB,gBAAGP,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMQ,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,OAAO,GAAGT,UAAU,CAACM,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;EAC/E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,eAAe;AAQ5B,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMe,gBAAgB,GAAGd,WAAW,CAAC,CAACe,OAAO,EAAEC,IAAI,GAAG,SAAS,EAAEC,QAAQ,GAAG,IAAI,KAAK;IACnF,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACrBP,gBAAgB,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEH,EAAE;MAAEH,OAAO;MAAEC,IAAI;MAAEC;IAAS,CAAC,CAAC,CAAC;IAEpE,OAAOC,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,gBAAgB,GAAGtB,WAAW,CAAEkB,EAAE,IAAK;IAC3CL,gBAAgB,CAACQ,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACN,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC/E,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,KAAK,GAAG;IACZX,gBAAgB;IAChBQ;EACF,CAAC;EAED,oBACEnB,OAAA,CAACC,mBAAmB,CAACsB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAf,QAAA,GACxCA,QAAQ,EACRE,aAAa,CAACe,GAAG,CAACH,YAAY,iBAC7BrB,OAAA,CAACF,YAAY;MAEXc,OAAO,EAAES,YAAY,CAACT,OAAQ;MAC9BC,IAAI,EAAEQ,YAAY,CAACR,IAAK;MACxBC,QAAQ,EAAEO,YAAY,CAACP,QAAS;MAChCW,OAAO,EAAEA,CAAA,KAAMN,gBAAgB,CAACE,YAAY,CAACN,EAAE;IAAE,GAJ5CM,YAAY,CAACN,EAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKrB,CACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC0B,CAAC;AAEnC,CAAC;AAACrB,GAAA,CAjCWF,oBAAoB;AAAAwB,EAAA,GAApBxB,oBAAoB;AAmCjC,eAAeL,mBAAmB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}