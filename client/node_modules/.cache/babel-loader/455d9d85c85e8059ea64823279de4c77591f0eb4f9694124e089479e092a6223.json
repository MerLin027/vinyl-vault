{"ast":null,"code":"/**\r\n * Updates the cart count and dispatches a custom event\r\n */\nexport const updateCartCount = () => {\n  // Create and dispatch a custom event for components to listen for\n  const event = new CustomEvent('cartUpdated');\n  window.dispatchEvent(event);\n};\n\n/**\r\n * Adds a product to the cart\r\n * @param {Object} product - The product to add to the cart\r\n */\nexport const addToCart = product => {\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\n\n  // Clean up the product data\n  const cleanProduct = {\n    id: product.id,\n    title: product.title,\n    price: parseFloat(product.price),\n    image: product.image,\n    category: product.category,\n    quantity: 1\n  };\n\n  // Check if product already exists in cart\n  const existingProductIndex = cart.findIndex(item => item.id === product.id);\n  if (existingProductIndex >= 0) {\n    cart[existingProductIndex].quantity += 1;\n  } else {\n    cart.push(cleanProduct);\n  }\n  localStorage.setItem('cart', JSON.stringify(cart));\n\n  // Dispatch event to update cart count in Navbar\n  updateCartCount();\n\n  // Return the updated cart\n  return cart;\n};\n\n/**\r\n * Removes a product from the cart\r\n * @param {string|number} productId - The ID of the product to remove\r\n */\nexport const removeFromCart = productId => {\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\n  const updatedCart = cart.filter(item => item.id !== productId);\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\n\n  // Dispatch event to update cart count in Navbar\n  updateCartCount();\n\n  // Return the updated cart\n  return updatedCart;\n};\n\n/**\r\n * Updates the quantity of a product in the cart\r\n * @param {string|number} productId - The ID of the product to update\r\n * @param {number} quantity - The new quantity\r\n */\nexport const updateCartItemQuantity = (productId, quantity) => {\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\n  const updatedCart = cart.map(item => {\n    if (item.id === productId) {\n      return {\n        ...item,\n        quantity: Math.max(1, quantity)\n      };\n    }\n    return item;\n  });\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\n\n  // Dispatch event to update cart count in Navbar\n  updateCartCount();\n\n  // Return the updated cart\n  return updatedCart;\n};\n\n/**\r\n * Clears the cart\r\n */\nexport const clearCart = () => {\n  localStorage.removeItem('cart');\n\n  // Dispatch event to update cart count in Navbar\n  updateCartCount();\n\n  // Return an empty cart\n  return [];\n};","map":{"version":3,"names":["updateCartCount","event","CustomEvent","window","dispatchEvent","addToCart","product","cart","JSON","parse","localStorage","getItem","cleanProduct","id","title","price","parseFloat","image","category","quantity","existingProductIndex","findIndex","item","push","setItem","stringify","removeFromCart","productId","updatedCart","filter","updateCartItemQuantity","map","Math","max","clearCart","removeItem"],"sources":["C:/Users/VRUSHANK/Desktop/Ecom Website/client/src/utils/cartUtils.js"],"sourcesContent":["/**\r\n * Updates the cart count and dispatches a custom event\r\n */\r\nexport const updateCartCount = () => {\r\n  // Create and dispatch a custom event for components to listen for\r\n  const event = new CustomEvent('cartUpdated');\r\n  window.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Adds a product to the cart\r\n * @param {Object} product - The product to add to the cart\r\n */\r\nexport const addToCart = (product) => {\r\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  \r\n  // Clean up the product data\r\n  const cleanProduct = {\r\n    id: product.id,\r\n    title: product.title,\r\n    price: parseFloat(product.price),\r\n    image: product.image,\r\n    category: product.category,\r\n    quantity: 1\r\n  };\r\n  \r\n  // Check if product already exists in cart\r\n  const existingProductIndex = cart.findIndex(item => item.id === product.id);\r\n  \r\n  if (existingProductIndex >= 0) {\r\n    cart[existingProductIndex].quantity += 1;\r\n  } else {\r\n    cart.push(cleanProduct);\r\n  }\r\n  \r\n  localStorage.setItem('cart', JSON.stringify(cart));\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return the updated cart\r\n  return cart;\r\n};\r\n\r\n/**\r\n * Removes a product from the cart\r\n * @param {string|number} productId - The ID of the product to remove\r\n */\r\nexport const removeFromCart = (productId) => {\r\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  \r\n  const updatedCart = cart.filter(item => item.id !== productId);\r\n  \r\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return the updated cart\r\n  return updatedCart;\r\n};\r\n\r\n/**\r\n * Updates the quantity of a product in the cart\r\n * @param {string|number} productId - The ID of the product to update\r\n * @param {number} quantity - The new quantity\r\n */\r\nexport const updateCartItemQuantity = (productId, quantity) => {\r\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  \r\n  const updatedCart = cart.map(item => {\r\n    if (item.id === productId) {\r\n      return { ...item, quantity: Math.max(1, quantity) };\r\n    }\r\n    return item;\r\n  });\r\n  \r\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return the updated cart\r\n  return updatedCart;\r\n};\r\n\r\n/**\r\n * Clears the cart\r\n */\r\nexport const clearCart = () => {\r\n  localStorage.removeItem('cart');\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return an empty cart\r\n  return [];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}