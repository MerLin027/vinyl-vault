{"ast":null,"code":"/**\r\n * Ensures a product has all necessary fields and format for display\r\n * @param {Object} product - The product object to normalize\r\n * @returns {Object} - Normalized product object\r\n */\nexport const normalizeProduct = product => {\n  if (!product) return null;\n\n  // Ensure product has all required fields\n  return {\n    id: product.id || Math.random().toString(36).substr(2, 9),\n    title: product.title || 'Untitled Product',\n    price: typeof product.price === 'number' ? product.price : typeof product.price === 'string' ? parseFloat(product.price) : 0,\n    description: product.description || '',\n    category: product.category || {\n      id: 0,\n      name: 'Uncategorized'\n    },\n    images: Array.isArray(product.images) && product.images.length > 0 ? product.images : ['https://via.placeholder.com/300?text=No+Image'],\n    // Add vinyl-specific properties if they don't exist\n    genre: product.genre || getRandomGenre(),\n    decade: product.decade || getRandomDecade(),\n    condition: product.condition || getRandomCondition()\n  };\n};\n\n/**\r\n * Normalizes an array of products\r\n * @param {Array} products - Array of product objects\r\n * @returns {Array} - Array of normalized product objects\r\n */\nexport const normalizeProducts = products => {\n  if (!Array.isArray(products)) return [];\n  return products.map(normalizeProduct).filter(Boolean);\n};\n\n/**\r\n * Safely parses API response\r\n * @param {Object} response - Fetch API response\r\n * @returns {Promise<Array>} - Promise that resolves to an array of products\r\n */\nexport const parseApiResponse = async response => {\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  try {\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      return [];\n    }\n    return normalizeProducts(data);\n  } catch (err) {\n    console.error('Error parsing API response:', err);\n    return [];\n  }\n};\n\n// Helper functions to generate random vinyl data\nconst getRandomGenre = () => {\n  const genres = ['Rock', 'Jazz', 'Classical', 'Hip Hop', 'Electronic', 'Soul', 'Blues', 'Pop'];\n  return genres[Math.floor(Math.random() * genres.length)];\n};\nconst getRandomDecade = () => {\n  const decades = ['1960s', '1970s', '1980s', '1990s', '2000s', '2010s', '2020s'];\n  return decades[Math.floor(Math.random() * decades.length)];\n};\nconst getRandomCondition = () => {\n  const conditions = ['Mint', 'Near Mint', 'Very Good Plus', 'Very Good', 'Good', 'Fair'];\n  return conditions[Math.floor(Math.random() * conditions.length)];\n};","map":{"version":3,"names":["normalizeProduct","product","id","Math","random","toString","substr","title","price","parseFloat","description","category","name","images","Array","isArray","length","genre","getRandomGenre","decade","getRandomDecade","condition","getRandomCondition","normalizeProducts","products","map","filter","Boolean","parseApiResponse","response","ok","Error","status","data","json","err","console","error","genres","floor","decades","conditions"],"sources":["C:/Users/VRUSHANK/Desktop/vinyl-vault/client/src/utils/productUtils.js"],"sourcesContent":["/**\r\n * Ensures a product has all necessary fields and format for display\r\n * @param {Object} product - The product object to normalize\r\n * @returns {Object} - Normalized product object\r\n */\r\nexport const normalizeProduct = (product) => {\r\n  if (!product) return null;\r\n  \r\n  // Ensure product has all required fields\r\n  return {\r\n    id: product.id || Math.random().toString(36).substr(2, 9),\r\n    title: product.title || 'Untitled Product',\r\n    price: typeof product.price === 'number' ? product.price : \r\n           typeof product.price === 'string' ? parseFloat(product.price) : 0,\r\n    description: product.description || '',\r\n    category: product.category || { id: 0, name: 'Uncategorized' },\r\n    images: Array.isArray(product.images) && product.images.length > 0\r\n      ? product.images\r\n      : ['https://via.placeholder.com/300?text=No+Image'],\r\n    // Add vinyl-specific properties if they don't exist\r\n    genre: product.genre || getRandomGenre(),\r\n    decade: product.decade || getRandomDecade(),\r\n    condition: product.condition || getRandomCondition()\r\n  };\r\n};\r\n\r\n/**\r\n * Normalizes an array of products\r\n * @param {Array} products - Array of product objects\r\n * @returns {Array} - Array of normalized product objects\r\n */\r\nexport const normalizeProducts = (products) => {\r\n  if (!Array.isArray(products)) return [];\r\n  return products.map(normalizeProduct).filter(Boolean);\r\n};\r\n\r\n/**\r\n * Safely parses API response\r\n * @param {Object} response - Fetch API response\r\n * @returns {Promise<Array>} - Promise that resolves to an array of products\r\n */\r\nexport const parseApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! Status: ${response.status}`);\r\n  }\r\n  \r\n  try {\r\n    const data = await response.json();\r\n    if (!Array.isArray(data)) {\r\n      return [];\r\n    }\r\n    return normalizeProducts(data);\r\n  } catch (err) {\r\n    console.error('Error parsing API response:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper functions to generate random vinyl data\r\nconst getRandomGenre = () => {\r\n  const genres = ['Rock', 'Jazz', 'Classical', 'Hip Hop', 'Electronic', 'Soul', 'Blues', 'Pop'];\r\n  return genres[Math.floor(Math.random() * genres.length)];\r\n};\r\n\r\nconst getRandomDecade = () => {\r\n  const decades = ['1960s', '1970s', '1980s', '1990s', '2000s', '2010s', '2020s'];\r\n  return decades[Math.floor(Math.random() * decades.length)];\r\n};\r\n\r\nconst getRandomCondition = () => {\r\n  const conditions = ['Mint', 'Near Mint', 'Very Good Plus', 'Very Good', 'Good', 'Fair'];\r\n  return conditions[Math.floor(Math.random() * conditions.length)];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}