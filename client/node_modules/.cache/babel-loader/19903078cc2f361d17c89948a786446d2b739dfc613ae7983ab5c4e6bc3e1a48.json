{"ast":null,"code":"/**\r\n * productTransformer.js\r\n * Transforms generic API products into vinyl-themed products with additional metadata\r\n */// Maps product categories to vinyl genres\nconst categoryToGenreMap={'Electronics':'Electronic','Clothes':'Rock','Furniture':'Jazz','Shoes':'Hip Hop','Others':'Classical','default':'Indie Rock'};// Artist names to randomly assign to products\nconst artistNames=['Vinyl Pioneers','The Analog Collective','Soundwave Symphony','Groove Revolution','Midnight Sessions','Rhythm Legacy','The Turntable Trio','Echo & The Needles','Wax Poetic','Vintage Vibrations'];// Album title prefixes to make generic products sound like vinyl albums\nconst albumPrefixes=['The Art of ','Sounds of ','Echoes of ','Rhythm & ','Classic ','Modern ','Vintage ','Analog ','Sessions: ','Live: '];// Decades to map based on product ID ranges\nconst getDecadeByProductId=id=>{const idNum=parseInt(id,10);if(idNum%7===0)return'1960s';if(idNum%6===0)return'1970s';if(idNum%5===0)return'1980s';if(idNum%4===0)return'1990s';if(idNum%3===0)return'2000s';if(idNum%2===0)return'2010s';return'2020s';};// Determine condition based on price (higher price = better condition)\nconst getConditionByPrice=price=>{const priceNum=parseFloat(price);if(priceNum>200)return'Mint';if(priceNum>150)return'Near Mint';if(priceNum>100)return'Very Good Plus';if(priceNum>70)return'Very Good';if(priceNum>40)return'Good';return'Fair';};// Determine product type based on price range\nconst getProductType=price=>{const priceNum=parseFloat(price);if(priceNum>250)return'turntable';if(priceNum<50)return'accessory';return'vinyl';};// Generate a vinyl-specific description\nconst generateVinylDescription=(product,genre,decade,condition)=>{const type=getProductType(product.price);if(type==='vinyl'){return`${condition} condition ${genre} vinyl from the ${decade}. ${product.description||''}`;}else if(type==='turntable'){return`Premium turntable with exceptional sound quality. Features anti-skating, adjustable counterweight, and built-in preamp. ${product.description||''}`;}else{return`Essential vinyl accessory for the serious collector. Enhances your listening experience. ${product.description||''}`;}};/**\r\n * Transforms a generic product into a vinyl-themed product\r\n * @param {Object} product - The original product from API\r\n * @returns {Object} - Enhanced product with vinyl-specific fields\r\n */const transformProduct=product=>{// Ensure product is an object with required fields\nif(!product||typeof product!=='object'){return null;}// Generate vinyl-specific fields\nconst genre=product.category&&product.category.name?categoryToGenreMap[product.category.name]||categoryToGenreMap.default:categoryToGenreMap.default;const decade=getDecadeByProductId(product.id);const condition=getConditionByPrice(product.price);const productType=getProductType(product.price);// Add random artist\nconst artist=artistNames[Math.floor(Math.random()*artistNames.length)];// Transform title for vinyl products\nlet transformedTitle=product.title;if(productType==='vinyl'){const prefix=albumPrefixes[Math.floor(Math.random()*albumPrefixes.length)];transformedTitle=`${prefix}${product.title}`;}// Enhanced description\nconst enhancedDescription=generateVinylDescription(product,genre,decade,condition);// Return the enhanced product\nreturn{...product,title:transformedTitle,description:enhancedDescription,genre,decade,condition,artist,productType};};/**\r\n * Transforms an array of products from API to vinyl-themed products\r\n * @param {Array} products - Array of products from API\r\n * @returns {Array} - Array of enhanced vinyl-themed products\r\n */const transformProducts=products=>{if(!Array.isArray(products)){return[];}return products.map(transformProduct).filter(Boolean);};export{transformProduct,transformProducts};","map":{"version":3,"names":["categoryToGenreMap","artistNames","albumPrefixes","getDecadeByProductId","id","idNum","parseInt","getConditionByPrice","price","priceNum","parseFloat","getProductType","generateVinylDescription","product","genre","decade","condition","type","description","transformProduct","category","name","default","productType","artist","Math","floor","random","length","transformedTitle","title","prefix","enhancedDescription","transformProducts","products","Array","isArray","map","filter","Boolean"],"sources":["C:/Users/VRUSHANK/Desktop/Ecom Website/client/src/utils/productTransformer.js"],"sourcesContent":["/**\r\n * productTransformer.js\r\n * Transforms generic API products into vinyl-themed products with additional metadata\r\n */\r\n\r\n// Maps product categories to vinyl genres\r\nconst categoryToGenreMap = {\r\n  'Electronics': 'Electronic',\r\n  'Clothes': 'Rock',\r\n  'Furniture': 'Jazz',\r\n  'Shoes': 'Hip Hop',\r\n  'Others': 'Classical',\r\n  'default': 'Indie Rock'\r\n};\r\n\r\n// Artist names to randomly assign to products\r\nconst artistNames = [\r\n  'Vinyl Pioneers',\r\n  'The Analog Collective',\r\n  'Soundwave Symphony',\r\n  'Groove Revolution',\r\n  'Midnight Sessions',\r\n  'Rhythm Legacy',\r\n  'The Turntable Trio',\r\n  'Echo & The Needles',\r\n  'Wax Poetic',\r\n  'Vintage Vibrations'\r\n];\r\n\r\n// Album title prefixes to make generic products sound like vinyl albums\r\nconst albumPrefixes = [\r\n  'The Art of ',\r\n  'Sounds of ',\r\n  'Echoes of ',\r\n  'Rhythm & ',\r\n  'Classic ',\r\n  'Modern ',\r\n  'Vintage ',\r\n  'Analog ',\r\n  'Sessions: ',\r\n  'Live: '\r\n];\r\n\r\n// Decades to map based on product ID ranges\r\nconst getDecadeByProductId = (id) => {\r\n  const idNum = parseInt(id, 10);\r\n  if (idNum % 7 === 0) return '1960s';\r\n  if (idNum % 6 === 0) return '1970s';\r\n  if (idNum % 5 === 0) return '1980s';\r\n  if (idNum % 4 === 0) return '1990s';\r\n  if (idNum % 3 === 0) return '2000s';\r\n  if (idNum % 2 === 0) return '2010s';\r\n  return '2020s';\r\n};\r\n\r\n// Determine condition based on price (higher price = better condition)\r\nconst getConditionByPrice = (price) => {\r\n  const priceNum = parseFloat(price);\r\n  if (priceNum > 200) return 'Mint';\r\n  if (priceNum > 150) return 'Near Mint';\r\n  if (priceNum > 100) return 'Very Good Plus';\r\n  if (priceNum > 70) return 'Very Good';\r\n  if (priceNum > 40) return 'Good';\r\n  return 'Fair';\r\n};\r\n\r\n// Determine product type based on price range\r\nconst getProductType = (price) => {\r\n  const priceNum = parseFloat(price);\r\n  if (priceNum > 250) return 'turntable';\r\n  if (priceNum < 50) return 'accessory';\r\n  return 'vinyl';\r\n};\r\n\r\n// Generate a vinyl-specific description\r\nconst generateVinylDescription = (product, genre, decade, condition) => {\r\n  const type = getProductType(product.price);\r\n  \r\n  if (type === 'vinyl') {\r\n    return `${condition} condition ${genre} vinyl from the ${decade}. ${product.description || ''}`;\r\n  } \r\n  else if (type === 'turntable') {\r\n    return `Premium turntable with exceptional sound quality. Features anti-skating, adjustable counterweight, and built-in preamp. ${product.description || ''}`;\r\n  }\r\n  else {\r\n    return `Essential vinyl accessory for the serious collector. Enhances your listening experience. ${product.description || ''}`;\r\n  }\r\n};\r\n\r\n/**\r\n * Transforms a generic product into a vinyl-themed product\r\n * @param {Object} product - The original product from API\r\n * @returns {Object} - Enhanced product with vinyl-specific fields\r\n */\r\nconst transformProduct = (product) => {\r\n  // Ensure product is an object with required fields\r\n  if (!product || typeof product !== 'object') {\r\n    return null;\r\n  }\r\n\r\n  // Generate vinyl-specific fields\r\n  const genre = product.category && product.category.name \r\n    ? categoryToGenreMap[product.category.name] || categoryToGenreMap.default\r\n    : categoryToGenreMap.default;\r\n  \r\n  const decade = getDecadeByProductId(product.id);\r\n  const condition = getConditionByPrice(product.price);\r\n  const productType = getProductType(product.price);\r\n  \r\n  // Add random artist\r\n  const artist = artistNames[Math.floor(Math.random() * artistNames.length)];\r\n  \r\n  // Transform title for vinyl products\r\n  let transformedTitle = product.title;\r\n  if (productType === 'vinyl') {\r\n    const prefix = albumPrefixes[Math.floor(Math.random() * albumPrefixes.length)];\r\n    transformedTitle = `${prefix}${product.title}`;\r\n  }\r\n  \r\n  // Enhanced description\r\n  const enhancedDescription = generateVinylDescription(product, genre, decade, condition);\r\n\r\n  // Return the enhanced product\r\n  return {\r\n    ...product,\r\n    title: transformedTitle,\r\n    description: enhancedDescription,\r\n    genre,\r\n    decade,\r\n    condition,\r\n    artist,\r\n    productType\r\n  };\r\n};\r\n\r\n/**\r\n * Transforms an array of products from API to vinyl-themed products\r\n * @param {Array} products - Array of products from API\r\n * @returns {Array} - Array of enhanced vinyl-themed products\r\n */\r\nconst transformProducts = (products) => {\r\n  if (!Array.isArray(products)) {\r\n    return [];\r\n  }\r\n  \r\n  return products.map(transformProduct).filter(Boolean);\r\n};\r\n\r\nexport { transformProduct, transformProducts }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}