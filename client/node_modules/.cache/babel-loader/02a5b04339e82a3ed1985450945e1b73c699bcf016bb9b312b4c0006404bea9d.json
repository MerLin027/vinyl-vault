{"ast":null,"code":"/**\r\n * Updates the cart count and dispatches a custom event\r\n */export const updateCartCount=()=>{// Create and dispatch a custom event for components to listen for\nconst event=new CustomEvent('cartUpdated');window.dispatchEvent(event);};/**\r\n * Adds a product to the cart\r\n * @param {Object} product - The product to add to the cart\r\n */export const addToCart=product=>{const cart=JSON.parse(localStorage.getItem('cart'))||[];// Clean up the product data\nconst cleanProduct={id:product.id,title:product.title,price:parseFloat(product.price),image:product.image,category:product.category,quantity:1};// Check if product already exists in cart\nconst existingProductIndex=cart.findIndex(item=>item.id===product.id);if(existingProductIndex>=0){cart[existingProductIndex].quantity+=1;}else{cart.push(cleanProduct);}localStorage.setItem('cart',JSON.stringify(cart));// Dispatch event to update cart count in Navbar\nupdateCartCount();// Return the updated cart\nreturn cart;};/**\r\n * Removes a product from the cart\r\n * @param {string|number} productId - The ID of the product to remove\r\n */export const removeFromCart=productId=>{const cart=JSON.parse(localStorage.getItem('cart'))||[];const updatedCart=cart.filter(item=>item.id!==productId);localStorage.setItem('cart',JSON.stringify(updatedCart));// Dispatch event to update cart count in Navbar\nupdateCartCount();// Return the updated cart\nreturn updatedCart;};/**\r\n * Updates the quantity of a product in the cart\r\n * @param {string|number} productId - The ID of the product to update\r\n * @param {number} quantity - The new quantity\r\n */export const updateCartItemQuantity=(productId,quantity)=>{const cart=JSON.parse(localStorage.getItem('cart'))||[];const updatedCart=cart.map(item=>{if(item.id===productId){return{...item,quantity:Math.max(1,quantity)};}return item;});localStorage.setItem('cart',JSON.stringify(updatedCart));// Dispatch event to update cart count in Navbar\nupdateCartCount();// Return the updated cart\nreturn updatedCart;};/**\r\n * Clears the cart\r\n */export const clearCart=()=>{localStorage.removeItem('cart');// Dispatch event to update cart count in Navbar\nupdateCartCount();// Return an empty cart\nreturn[];};","map":{"version":3,"names":["updateCartCount","event","CustomEvent","window","dispatchEvent","addToCart","product","cart","JSON","parse","localStorage","getItem","cleanProduct","id","title","price","parseFloat","image","category","quantity","existingProductIndex","findIndex","item","push","setItem","stringify","removeFromCart","productId","updatedCart","filter","updateCartItemQuantity","map","Math","max","clearCart","removeItem"],"sources":["C:/Users/VRUSHANK/Desktop/Ecom Website/client/src/utils/cartUtils.js"],"sourcesContent":["/**\r\n * Updates the cart count and dispatches a custom event\r\n */\r\nexport const updateCartCount = () => {\r\n  // Create and dispatch a custom event for components to listen for\r\n  const event = new CustomEvent('cartUpdated');\r\n  window.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Adds a product to the cart\r\n * @param {Object} product - The product to add to the cart\r\n */\r\nexport const addToCart = (product) => {\r\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  \r\n  // Clean up the product data\r\n  const cleanProduct = {\r\n    id: product.id,\r\n    title: product.title,\r\n    price: parseFloat(product.price),\r\n    image: product.image,\r\n    category: product.category,\r\n    quantity: 1\r\n  };\r\n  \r\n  // Check if product already exists in cart\r\n  const existingProductIndex = cart.findIndex(item => item.id === product.id);\r\n  \r\n  if (existingProductIndex >= 0) {\r\n    cart[existingProductIndex].quantity += 1;\r\n  } else {\r\n    cart.push(cleanProduct);\r\n  }\r\n  \r\n  localStorage.setItem('cart', JSON.stringify(cart));\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return the updated cart\r\n  return cart;\r\n};\r\n\r\n/**\r\n * Removes a product from the cart\r\n * @param {string|number} productId - The ID of the product to remove\r\n */\r\nexport const removeFromCart = (productId) => {\r\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  \r\n  const updatedCart = cart.filter(item => item.id !== productId);\r\n  \r\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return the updated cart\r\n  return updatedCart;\r\n};\r\n\r\n/**\r\n * Updates the quantity of a product in the cart\r\n * @param {string|number} productId - The ID of the product to update\r\n * @param {number} quantity - The new quantity\r\n */\r\nexport const updateCartItemQuantity = (productId, quantity) => {\r\n  const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  \r\n  const updatedCart = cart.map(item => {\r\n    if (item.id === productId) {\r\n      return { ...item, quantity: Math.max(1, quantity) };\r\n    }\r\n    return item;\r\n  });\r\n  \r\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return the updated cart\r\n  return updatedCart;\r\n};\r\n\r\n/**\r\n * Clears the cart\r\n */\r\nexport const clearCart = () => {\r\n  localStorage.removeItem('cart');\r\n  \r\n  // Dispatch event to update cart count in Navbar\r\n  updateCartCount();\r\n  \r\n  // Return an empty cart\r\n  return [];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}