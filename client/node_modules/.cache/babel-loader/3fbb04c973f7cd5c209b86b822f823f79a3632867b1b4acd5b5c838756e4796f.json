{"ast":null,"code":"/**\r\n * productTransformer.js\r\n * Transforms generic API products into vinyl-themed products with additional metadata\r\n */\n\n// Maps product categories to vinyl genres\nconst categoryToGenreMap = {\n  'Electronics': 'Electronic',\n  'Clothes': 'Rock',\n  'Furniture': 'Jazz',\n  'Shoes': 'Hip Hop',\n  'Others': 'Classical',\n  'default': 'Indie Rock'\n};\n\n// Artist names to randomly assign to products\nconst artistNames = ['Vinyl Pioneers', 'The Analog Collective', 'Soundwave Symphony', 'Groove Revolution', 'Midnight Sessions', 'Rhythm Legacy', 'The Turntable Trio', 'Echo & The Needles', 'Wax Poetic', 'Vintage Vibrations'];\n\n// Album title prefixes to make generic products sound like vinyl albums\nconst albumPrefixes = ['The Art of ', 'Sounds of ', 'Echoes of ', 'Rhythm & ', 'Classic ', 'Modern ', 'Vintage ', 'Analog ', 'Sessions: ', 'Live: '];\n\n// Decades to map based on product ID ranges\nconst getDecadeByProductId = id => {\n  const idNum = parseInt(id, 10);\n  if (idNum % 7 === 0) return '1960s';\n  if (idNum % 6 === 0) return '1970s';\n  if (idNum % 5 === 0) return '1980s';\n  if (idNum % 4 === 0) return '1990s';\n  if (idNum % 3 === 0) return '2000s';\n  if (idNum % 2 === 0) return '2010s';\n  return '2020s';\n};\n\n// Determine condition based on price (higher price = better condition)\nconst getConditionByPrice = price => {\n  const priceNum = parseFloat(price);\n  if (priceNum > 200) return 'Mint';\n  if (priceNum > 150) return 'Near Mint';\n  if (priceNum > 100) return 'Very Good Plus';\n  if (priceNum > 70) return 'Very Good';\n  if (priceNum > 40) return 'Good';\n  return 'Fair';\n};\n\n// Determine product type based on price range\nconst getProductType = price => {\n  const priceNum = parseFloat(price);\n  if (priceNum > 250) return 'turntable';\n  if (priceNum < 50) return 'accessory';\n  return 'vinyl';\n};\n\n// Generate a vinyl-specific description\nconst generateVinylDescription = (product, genre, decade, condition) => {\n  const type = getProductType(product.price);\n  if (type === 'vinyl') {\n    return `${condition} condition ${genre} vinyl from the ${decade}. ${product.description || ''}`;\n  } else if (type === 'turntable') {\n    return `Premium turntable with exceptional sound quality. Features anti-skating, adjustable counterweight, and built-in preamp. ${product.description || ''}`;\n  } else {\n    return `Essential vinyl accessory for the serious collector. Enhances your listening experience. ${product.description || ''}`;\n  }\n};\n\n/**\r\n * Transforms a generic product into a vinyl-themed product\r\n * @param {Object} product - The original product from API\r\n * @returns {Object} - Enhanced product with vinyl-specific fields\r\n */\nconst transformProduct = product => {\n  // Ensure product is an object with required fields\n  if (!product || typeof product !== 'object') {\n    return null;\n  }\n\n  // Generate vinyl-specific fields\n  const genre = product.category && product.category.name ? categoryToGenreMap[product.category.name] || categoryToGenreMap.default : categoryToGenreMap.default;\n  const decade = getDecadeByProductId(product.id);\n  const condition = getConditionByPrice(product.price);\n  const productType = getProductType(product.price);\n\n  // Add random artist\n  const artist = artistNames[Math.floor(Math.random() * artistNames.length)];\n\n  // Transform title for vinyl products\n  let transformedTitle = product.title;\n  if (productType === 'vinyl') {\n    const prefix = albumPrefixes[Math.floor(Math.random() * albumPrefixes.length)];\n    transformedTitle = `${prefix}${product.title}`;\n  }\n\n  // Enhanced description\n  const enhancedDescription = generateVinylDescription(product, genre, decade, condition);\n\n  // Return the enhanced product\n  return {\n    ...product,\n    title: transformedTitle,\n    description: enhancedDescription,\n    genre,\n    decade,\n    condition,\n    artist,\n    productType\n  };\n};\n\n/**\r\n * Transforms an array of products from API to vinyl-themed products\r\n * @param {Array} products - Array of products from API\r\n * @returns {Array} - Array of enhanced vinyl-themed products\r\n */\nconst transformProducts = products => {\n  if (!Array.isArray(products)) {\n    return [];\n  }\n  return products.map(transformProduct).filter(Boolean);\n};\nexport { transformProduct, transformProducts };","map":{"version":3,"names":["categoryToGenreMap","artistNames","albumPrefixes","getDecadeByProductId","id","idNum","parseInt","getConditionByPrice","price","priceNum","parseFloat","getProductType","generateVinylDescription","product","genre","decade","condition","type","description","transformProduct","category","name","default","productType","artist","Math","floor","random","length","transformedTitle","title","prefix","enhancedDescription","transformProducts","products","Array","isArray","map","filter","Boolean"],"sources":["C:/Users/VRUSHANK/Desktop/Ecom Website/client/src/utils/productTransformer.js"],"sourcesContent":["/**\r\n * productTransformer.js\r\n * Transforms generic API products into vinyl-themed products with additional metadata\r\n */\r\n\r\n// Maps product categories to vinyl genres\r\nconst categoryToGenreMap = {\r\n  'Electronics': 'Electronic',\r\n  'Clothes': 'Rock',\r\n  'Furniture': 'Jazz',\r\n  'Shoes': 'Hip Hop',\r\n  'Others': 'Classical',\r\n  'default': 'Indie Rock'\r\n};\r\n\r\n// Artist names to randomly assign to products\r\nconst artistNames = [\r\n  'Vinyl Pioneers',\r\n  'The Analog Collective',\r\n  'Soundwave Symphony',\r\n  'Groove Revolution',\r\n  'Midnight Sessions',\r\n  'Rhythm Legacy',\r\n  'The Turntable Trio',\r\n  'Echo & The Needles',\r\n  'Wax Poetic',\r\n  'Vintage Vibrations'\r\n];\r\n\r\n// Album title prefixes to make generic products sound like vinyl albums\r\nconst albumPrefixes = [\r\n  'The Art of ',\r\n  'Sounds of ',\r\n  'Echoes of ',\r\n  'Rhythm & ',\r\n  'Classic ',\r\n  'Modern ',\r\n  'Vintage ',\r\n  'Analog ',\r\n  'Sessions: ',\r\n  'Live: '\r\n];\r\n\r\n// Decades to map based on product ID ranges\r\nconst getDecadeByProductId = (id) => {\r\n  const idNum = parseInt(id, 10);\r\n  if (idNum % 7 === 0) return '1960s';\r\n  if (idNum % 6 === 0) return '1970s';\r\n  if (idNum % 5 === 0) return '1980s';\r\n  if (idNum % 4 === 0) return '1990s';\r\n  if (idNum % 3 === 0) return '2000s';\r\n  if (idNum % 2 === 0) return '2010s';\r\n  return '2020s';\r\n};\r\n\r\n// Determine condition based on price (higher price = better condition)\r\nconst getConditionByPrice = (price) => {\r\n  const priceNum = parseFloat(price);\r\n  if (priceNum > 200) return 'Mint';\r\n  if (priceNum > 150) return 'Near Mint';\r\n  if (priceNum > 100) return 'Very Good Plus';\r\n  if (priceNum > 70) return 'Very Good';\r\n  if (priceNum > 40) return 'Good';\r\n  return 'Fair';\r\n};\r\n\r\n// Determine product type based on price range\r\nconst getProductType = (price) => {\r\n  const priceNum = parseFloat(price);\r\n  if (priceNum > 250) return 'turntable';\r\n  if (priceNum < 50) return 'accessory';\r\n  return 'vinyl';\r\n};\r\n\r\n// Generate a vinyl-specific description\r\nconst generateVinylDescription = (product, genre, decade, condition) => {\r\n  const type = getProductType(product.price);\r\n  \r\n  if (type === 'vinyl') {\r\n    return `${condition} condition ${genre} vinyl from the ${decade}. ${product.description || ''}`;\r\n  } \r\n  else if (type === 'turntable') {\r\n    return `Premium turntable with exceptional sound quality. Features anti-skating, adjustable counterweight, and built-in preamp. ${product.description || ''}`;\r\n  }\r\n  else {\r\n    return `Essential vinyl accessory for the serious collector. Enhances your listening experience. ${product.description || ''}`;\r\n  }\r\n};\r\n\r\n/**\r\n * Transforms a generic product into a vinyl-themed product\r\n * @param {Object} product - The original product from API\r\n * @returns {Object} - Enhanced product with vinyl-specific fields\r\n */\r\nconst transformProduct = (product) => {\r\n  // Ensure product is an object with required fields\r\n  if (!product || typeof product !== 'object') {\r\n    return null;\r\n  }\r\n\r\n  // Generate vinyl-specific fields\r\n  const genre = product.category && product.category.name \r\n    ? categoryToGenreMap[product.category.name] || categoryToGenreMap.default\r\n    : categoryToGenreMap.default;\r\n  \r\n  const decade = getDecadeByProductId(product.id);\r\n  const condition = getConditionByPrice(product.price);\r\n  const productType = getProductType(product.price);\r\n  \r\n  // Add random artist\r\n  const artist = artistNames[Math.floor(Math.random() * artistNames.length)];\r\n  \r\n  // Transform title for vinyl products\r\n  let transformedTitle = product.title;\r\n  if (productType === 'vinyl') {\r\n    const prefix = albumPrefixes[Math.floor(Math.random() * albumPrefixes.length)];\r\n    transformedTitle = `${prefix}${product.title}`;\r\n  }\r\n  \r\n  // Enhanced description\r\n  const enhancedDescription = generateVinylDescription(product, genre, decade, condition);\r\n\r\n  // Return the enhanced product\r\n  return {\r\n    ...product,\r\n    title: transformedTitle,\r\n    description: enhancedDescription,\r\n    genre,\r\n    decade,\r\n    condition,\r\n    artist,\r\n    productType\r\n  };\r\n};\r\n\r\n/**\r\n * Transforms an array of products from API to vinyl-themed products\r\n * @param {Array} products - Array of products from API\r\n * @returns {Array} - Array of enhanced vinyl-themed products\r\n */\r\nconst transformProducts = (products) => {\r\n  if (!Array.isArray(products)) {\r\n    return [];\r\n  }\r\n  \r\n  return products.map(transformProduct).filter(Boolean);\r\n};\r\n\r\nexport { transformProduct, transformProducts }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}